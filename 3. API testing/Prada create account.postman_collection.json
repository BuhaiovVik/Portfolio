{
	"info": {
		"_postman_id": "865c8f41-2cac-4c06-a53b-6b2bc9a8803a",
		"name": "Prada create account",
		"description": "Explore the world of luxury fashion testing with this Prada API mock created for showcasing testing skills. This project simulates a simplified Prada API using JSON blobs, allowing users to interact with endpoints reminiscent of a real fashion API. Utilize Postman to send requests, test different scenarios, and enhance your API testing capabilities. Dive into the realm of fashion-tech without leaving the comfort of your testing environment.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31243001"
	},
	"item": [
		{
			"name": "Create account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response have correct code",
							"switch (responseCode.code) {",
							"    case 201:",
							"        tests[\"201 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 Unauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"// Test to check if the response time is less than 0.5 sec",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Test to check if the response size is less than 5kb",
							"pm.test(\"Response Size is less than 5KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(5000);",
							"});",
							"",
							"// Test to check if the body size is more than 0",
							"pm.test(\"Response Size is more than 1BT\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.above(1);",
							"});",
							"",
							"// Test to check if the headers have correct structure",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.response.to.have.header(\"Content-Length\");",
							"    pm.response.to.have.header(\"Connection\");",
							"    pm.response.to.have.header(\"location\");",
							"    pm.response.to.have.header(\"CF-Cache-Status\");",
							"    pm.response.to.have.header(\"Report-To\");",
							"    pm.response.to.have.header(\"NEL\");",
							"    pm.response.to.have.header(\"Server\", \"cloudflare\");",
							"    pm.response.to.have.header(\"CF-RAY\");",
							"    pm.response.to.have.header(\"alt-svc\");",
							"});",
							"",
							"// Test to check if the response have no error message",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							"// Test to validate the response schema",
							"pm.test(\"Schema is valid\", function () {",
							"    var schema = {",
							"        type: \"object\",",
							"        properties: {",
							"            user: {",
							"                type: \"object\",",
							"                properties: {",
							"                    email: { type: \"string\" },",
							"                    password: { type: \"string\" },",
							"                    profile: {",
							"                        type: \"object\",",
							"                        properties: {",
							"                            first_name: { type: \"string\" },",
							"                            last_name: { type: \"string\" },",
							"                            birthdate: { type: \"string\" },",
							"                            phone_number: { type: \"string\" },",
							"                            address: {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    street: { type: \"string\" },",
							"                                    city: { type: \"string\" },",
							"                                    state: { type: \"string\" },",
							"                                    zip_code: { type: \"string\" },",
							"                                    country: { type: \"string\" }",
							"                                }",
							"                            }",
							"                        }",
							"                    },",
							"                    preferences: {",
							"                        type: \"object\",",
							"                        properties: {",
							"                            theme: { type: \"string\" },",
							"                            notifications: {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    email: { type: \"boolean\" },",
							"                                    sms: { type: \"boolean\" }",
							"                                }",
							"                            }",
							"                        }",
							"                    }",
							"                }",
							"            },",
							"            marketing_opt_in: { type: \"boolean\" }",
							"        },",
							"        required: [\"user\", \"marketing_opt_in\"]",
							"    };",
							"",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});",
							"",
							"// Get id value fron header",
							"let location_id = pm.response.headers.get('location');",
							"pm.environment.set('id', location_id.slice(33))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Random data for test (won't work without environment)\r",
							"let stateAbbreviations = [\r",
							" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
							" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
							" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
							" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
							" 'VT','VI','VA','WA','WV','WI','WY'\r",
							"];\r",
							"\r",
							"let themes = [\r",
							"    \"light\", \"dark\"\r",
							"]\r",
							"\r",
							"let randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
							"pm.environment.set(\"e_mail\", randomEmail);\r",
							"\r",
							"let randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"pm.environment.set(\"pass\", randomPassword);\r",
							"\r",
							"let notEmail = pm.variables.replaceIn('{{$randomBoolean}}')\r",
							"pm.environment.set(\"notiEmail\", notEmail);\r",
							"\r",
							"let notSms = pm.variables.replaceIn('{{$randomBoolean}}')\r",
							"pm.environment.set(\"notiSms\", notSms);\r",
							"\r",
							"let notMarket = pm.variables.replaceIn('{{$randomBoolean}}')\r",
							"pm.environment.set(\"notiMarket\", notMarket);\r",
							"\r",
							"let randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
							"pm.environment.set(\"USstate\", randomState);\r",
							"\r",
							"let theme = themes[Math.floor(Math.random() * themes.length)];\r",
							"pm.environment.set(\"Themes\", theme);\r",
							"\r",
							"let fName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"pm.environment.set(\"firstName\", fName);\r",
							"\r",
							"let lName = pm.variables.replaceIn('{{$randomLastName}}')\r",
							"pm.environment.set(\"lastName\", lName);\r",
							"\r",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
							"pm.environment.set(\"addressLine1\", addrLn1);\r",
							"\r",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')\r",
							"pm.environment.set(\"city\", cty);\r",
							"\r",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')\r",
							"pm.environment.set(\"country\", cntry);\r",
							"\r",
							"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
							"pm.environment.set(\"phoneNumber\", phoneNum);\r",
							"\r",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*89999) + 10000);\r",
							"\r",
							"// Random date of birthday\r",
							"function getRandomBirthday(startDate, endDate) {\r",
							"  const startMillis = new Date(startDate).getTime();\r",
							"  const endMillis = new Date(endDate).getTime();\r",
							"  const randomMillis = startMillis + Math.random() * (endMillis - startMillis);\r",
							"  const randomDate = new Date(randomMillis);\r",
							"  const formattedDate = randomDate.toISOString().slice(0, 10);\r",
							"  return formattedDate;\r",
							"}\r",
							"\r",
							"const startDate = '1950-01-01';\r",
							"const endDate = '2010-01-01';\r",
							"const randomBirthday = getRandomBirthday(startDate, endDate);\r",
							"\r",
							"pm.environment.set(\"birthDate\", randomBirthday);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n    \"email\": \"{{e_mail}}\",\r\n    \"password\": \"{{pass}}\",\r\n    \"profile\": {\r\n      \"first_name\": \"{{firstName}}\",\r\n      \"last name\": \"{{lastName}}\",\r\n      \"birthdate\": \"{{birthDate}}\",\r\n      \"phone_number\": \"{{phoneNumber}}\",\r\n      \"address\": {\r\n        \"street\": \"{{addressLine1}}\",\r\n        \"city\": \"{{city}}\",\r\n        \"state\": \"{{USstate}}\",\r\n        \"zip_code\": \"{{zipCode}}\",\r\n        \"country\": \"{{country}}\"\r\n      }\r\n    },\r\n    \"preferences\": {\r\n      \"theme\": \"{{Themes}}\",\r\n      \"notifications\": {\r\n        \"email\": {{notiEmail}},\r\n        \"sms\": {{notiSms}}\r\n      }\r\n    }\r\n  },\r\n  \"marketing_opt_in\": {{notiMarket}}\r\n}\r\n"
				},
				"url": {
					"raw": "https://jsonblob.com/api/jsonBlob/",
					"protocol": "https",
					"host": [
						"jsonblob",
						"com"
					],
					"path": [
						"api",
						"jsonBlob",
						""
					]
				},
				"description": "> Explore the world of luxury fashion testing with this Prada API mock created for showcasing testing skills. This project simulates a simplified Prada API using JSON blobs, allowing users to interact with endpoints reminiscent of a real fashion API. Utilize Postman to send requests, test different scenarios, and enhance your API testing capabilities. Dive into the realm of fashion-tech without leaving the comfort of your testing environment."
			},
			"response": []
		},
		{
			"name": "Retrieve account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response have correct code",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 Unauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"// Test to check if the response time is less than 0.5 sec",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Test to check if the response size is less than 5kb",
							"pm.test(\"Response Size is less than 5KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(5000);",
							"});",
							"",
							"// Test to check if the body size is more than 0",
							"pm.test(\"Response Size is more than 1BT\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.above(1);",
							"});",
							"",
							"// Test to check if the headers have correct structure",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");",
							"    pm.response.to.have.header(\"Report-To\");",
							"    pm.response.to.have.header(\"NEL\");",
							"    pm.response.to.have.header(\"Server\", \"cloudflare\");",
							"    pm.response.to.have.header(\"CF-RAY\");",
							"    pm.response.to.have.header(\"Content-Encoding\", \"br\");",
							"    pm.response.to.have.header(\"alt-svc\");",
							"});",
							"",
							"// Test to check if the response have no error message",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							"// Test to validate the response schema",
							"pm.test(\"Schema is valid\", function () {",
							"    var schema = {",
							"        type: \"object\",",
							"        properties: {",
							"            user: {",
							"                type: \"object\",",
							"                properties: {",
							"                    email: { type: \"string\" },",
							"                    password: { type: \"string\" },",
							"                    profile: {",
							"                        type: \"object\",",
							"                        properties: {",
							"                            first_name: { type: \"string\" },",
							"                            last_name: { type: \"string\" },",
							"                            birthdate: { type: \"string\" },",
							"                            phone_number: { type: \"string\" },",
							"                            address: {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    street: { type: \"string\" },",
							"                                    city: { type: \"string\" },",
							"                                    state: { type: \"string\" },",
							"                                    zip_code: { type: \"string\" },",
							"                                    country: { type: \"string\" }",
							"                                }",
							"                            }",
							"                        }",
							"                    },",
							"                    preferences: {",
							"                        type: \"object\",",
							"                        properties: {",
							"                            theme: { type: \"string\" },",
							"                            notifications: {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    email: { type: \"boolean\" },",
							"                                    sms: { type: \"boolean\" }",
							"                                }",
							"                            }",
							"                        }",
							"                    }",
							"                }",
							"            },",
							"            marketing_opt_in: { type: \"boolean\" }",
							"        },",
							"        required: [\"user\", \"marketing_opt_in\"]",
							"    };",
							"",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://jsonblob.com/api/jsonBlob/{{id}}",
					"protocol": "https",
					"host": [
						"jsonblob",
						"com"
					],
					"path": [
						"api",
						"jsonBlob",
						"{{id}}"
					]
				},
				"description": "Explore the world of luxury fashion testing with this Prada API mock created for showcasing testing skills. This project simulates a simplified Prada API using JSON blobs, allowing users to interact with endpoints reminiscent of a real fashion API. Utilize Postman to send requests, test different scenarios, and enhance your API testing capabilities. Dive into the realm of fashion-tech without leaving the comfort of your testing environment."
			},
			"response": []
		},
		{
			"name": "Edit address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response have correct code",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 Unauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"// Test to check if the response time is less than 0.5 sec",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Test to check if the response size is less than 5kb",
							"pm.test(\"Response Size is less than 5KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(5000);",
							"});",
							"",
							"// Test to check if the body size is more than 0",
							"pm.test(\"Response Size is more than 1BT\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.above(1);",
							"});",
							"",
							"// Test to check if the headers have correct structure",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");",
							"    pm.response.to.have.header(\"Report-To\");",
							"    pm.response.to.have.header(\"NEL\");",
							"    pm.response.to.have.header(\"Server\", \"cloudflare\");",
							"    pm.response.to.have.header(\"CF-RAY\");",
							"    pm.response.to.have.header(\"Content-Encoding\", \"br\");",
							"    pm.response.to.have.header(\"alt-svc\");",
							"});",
							"",
							"// Test to check if the response have no error message",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							"// Test to validate the response schema",
							"pm.test(\"Schema is valid\", function () {",
							"    var schema = {",
							"        type: \"object\",",
							"        properties: {",
							"            user: {",
							"                type: \"object\",",
							"                properties: {",
							"                    email: { type: \"string\" },",
							"                    password: { type: \"string\" },",
							"                    profile: {",
							"                        type: \"object\",",
							"                        properties: {",
							"                            first_name: { type: \"string\" },",
							"                            last_name: { type: \"string\" },",
							"                            birthdate: { type: \"string\" },",
							"                            phone_number: { type: \"string\" },",
							"                            address: {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    street: { type: \"string\" },",
							"                                    city: { type: \"string\" },",
							"                                    state: { type: \"string\" },",
							"                                    zip_code: { type: \"string\" },",
							"                                    country: { type: \"string\" }",
							"                                }",
							"                            }",
							"                        }",
							"                    },",
							"                    preferences: {",
							"                        type: \"object\",",
							"                        properties: {",
							"                            theme: { type: \"string\" },",
							"                            notifications: {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    email: { type: \"boolean\" },",
							"                                    sms: { type: \"boolean\" }",
							"                                }",
							"                            }",
							"                        }",
							"                    }",
							"                }",
							"            },",
							"            marketing_opt_in: { type: \"boolean\" }",
							"        },",
							"        required: [\"user\", \"marketing_opt_in\"]",
							"    };",
							"",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Random data for test (won't work without environment)\r",
							"let stateAbbreviations = [\r",
							" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
							" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
							" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
							" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
							" 'VT','VI','VA','WA','WV','WI','WY'\r",
							"];\r",
							"\r",
							"let randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
							"pm.environment.set(\"USstate\", randomState);\r",
							"\r",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
							"pm.environment.set(\"addressLine1\", addrLn1);\r",
							"\r",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')\r",
							"pm.environment.set(\"city\", cty);\r",
							"\r",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')\r",
							"pm.environment.set(\"country\", cntry);\r",
							"\r",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*89999) + 10000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n    \"email\": \"{{e_mail}}\",\r\n    \"password\": \"{{pass}}\",\r\n    \"profile\": {\r\n      \"first_name\": \"{{firstName}}\",\r\n      \"last name\": \"{{lastName}}\",\r\n      \"birthdate\": \"{{birthDate}}\",\r\n      \"phone_number\": \"{{phoneNumber}}\",\r\n      \"address\": {\r\n        \"street\": \"{{addressLine1}}\",\r\n        \"city\": \"{{city}}\",\r\n        \"state\": \"{{USstate}}\",\r\n        \"zip_code\": \"{{zipCode}}\",\r\n        \"country\": \"{{country}}\"\r\n      }\r\n    },\r\n    \"preferences\": {\r\n      \"theme\": \"{{Themes}}\",\r\n      \"notifications\": {\r\n        \"email\": {{notiEmail}},\r\n        \"sms\": {{notiSms}}\r\n      }\r\n    }\r\n  },\r\n  \"marketing_opt_in\": {{notiMarket}}\r\n}\r\n"
				},
				"url": {
					"raw": "https://jsonblob.com/api/jsonBlob/{{id}}",
					"protocol": "https",
					"host": [
						"jsonblob",
						"com"
					],
					"path": [
						"api",
						"jsonBlob",
						"{{id}}"
					]
				},
				"description": "Explore the world of luxury fashion testing with this Prada API mock created for showcasing testing skills. This project simulates a simplified Prada API using JSON blobs, allowing users to interact with endpoints reminiscent of a real fashion API. Utilize Postman to send requests, test different scenarios, and enhance your API testing capabilities. Dive into the realm of fashion-tech without leaving the comfort of your testing environment."
			},
			"response": []
		},
		{
			"name": "Retrieve account after chage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response have correct code",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 Unauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"// Test to check if the response time is less than 0.5 sec",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Test to check if the response size is less than 5kb",
							"pm.test(\"Response Size is less than 5KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(5000);",
							"});",
							"",
							"// Test to check if the body size is more than 0",
							"pm.test(\"Response Size is more than 1BT\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.above(1);",
							"});",
							"",
							"// Test to check if the headers have correct structure",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"CF-Cache-Status\", \"DYNAMIC\");",
							"    pm.response.to.have.header(\"Report-To\");",
							"    pm.response.to.have.header(\"NEL\");",
							"    pm.response.to.have.header(\"Server\", \"cloudflare\");",
							"    pm.response.to.have.header(\"CF-RAY\");",
							"    pm.response.to.have.header(\"Content-Encoding\", \"br\");",
							"    pm.response.to.have.header(\"alt-svc\");",
							"});",
							"",
							"// Test to check if the response have no error message",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							"// Test to validate the response schema",
							"pm.test(\"Schema is valid\", function () {",
							"    var schema = {",
							"        type: \"object\",",
							"        properties: {",
							"            user: {",
							"                type: \"object\",",
							"                properties: {",
							"                    email: { type: \"string\" },",
							"                    password: { type: \"string\" },",
							"                    profile: {",
							"                        type: \"object\",",
							"                        properties: {",
							"                            first_name: { type: \"string\" },",
							"                            last_name: { type: \"string\" },",
							"                            birthdate: { type: \"string\" },",
							"                            phone_number: { type: \"string\" },",
							"                            address: {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    street: { type: \"string\" },",
							"                                    city: { type: \"string\" },",
							"                                    state: { type: \"string\" },",
							"                                    zip_code: { type: \"string\" },",
							"                                    country: { type: \"string\" }",
							"                                }",
							"                            }",
							"                        }",
							"                    },",
							"                    preferences: {",
							"                        type: \"object\",",
							"                        properties: {",
							"                            theme: { type: \"string\" },",
							"                            notifications: {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    email: { type: \"boolean\" },",
							"                                    sms: { type: \"boolean\" }",
							"                                }",
							"                            }",
							"                        }",
							"                    }",
							"                }",
							"            },",
							"            marketing_opt_in: { type: \"boolean\" }",
							"        },",
							"        required: [\"user\", \"marketing_opt_in\"]",
							"    };",
							"",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://jsonblob.com/api/jsonBlob/{{id}}",
					"protocol": "https",
					"host": [
						"jsonblob",
						"com"
					],
					"path": [
						"api",
						"jsonBlob",
						"{{id}}"
					]
				},
				"description": "Explore the world of luxury fashion testing with this Prada API mock created for showcasing testing skills. This project simulates a simplified Prada API using JSON blobs, allowing users to interact with endpoints reminiscent of a real fashion API. Utilize Postman to send requests, test different scenarios, and enhance your API testing capabilities. Dive into the realm of fashion-tech without leaving the comfort of your testing environment."
			},
			"response": []
		},
		{
			"name": "Delete account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response have correct code",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 Unauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"// Test to check if the response time is less than 0.5 sec",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Test to check if the response size is less than 5kb",
							"pm.test(\"Response Size is less than 5KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(5000);",
							"});",
							"",
							"// Test to check if the body size is equal 0",
							"pm.test(\"Response Size is 0\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.equal(0);",
							"});",
							"",
							"// Test to check if the headers have correct structure",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.response.to.have.header(\"Connection\");",
							"    pm.response.to.have.header(\"CF-Cache-Status\");",
							"    pm.response.to.have.header(\"Report-To\");",
							"    pm.response.to.have.header(\"NEL\");",
							"    pm.response.to.have.header(\"Server\", \"cloudflare\");",
							"    pm.response.to.have.header(\"CF-RAY\");",
							"    pm.response.to.have.header(\"alt-svc\");",
							"});",
							"",
							"// Test to check if the response have no error message",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonblob.com/api/jsonBlob/{{id}}",
					"protocol": "https",
					"host": [
						"jsonblob",
						"com"
					],
					"path": [
						"api",
						"jsonBlob",
						"{{id}}"
					]
				},
				"description": "Explore the world of luxury fashion testing with this Prada API mock created for showcasing testing skills. This project simulates a simplified Prada API using JSON blobs, allowing users to interact with endpoints reminiscent of a real fashion API. Utilize Postman to send requests, test different scenarios, and enhance your API testing capabilities. Dive into the realm of fashion-tech without leaving the comfort of your testing environment."
			},
			"response": []
		},
		{
			"name": "Delete deleted account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response have correct code",
							"switch (responseCode.code) {",
							"    case 404:",
							"        tests[\"404 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 Unauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"// Test to check if the response time is less than 0.5 sec",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Test to check if the response size is less than 5kb",
							"pm.test(\"Response Size is less than 5KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(5000);",
							"});",
							"",
							"// Test to check if the headers have correct structure",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.response.to.have.header(\"Connection\");",
							"    pm.response.to.have.header(\"CF-Cache-Status\");",
							"    pm.response.to.have.header(\"Report-To\");",
							"    pm.response.to.have.header(\"NEL\");",
							"    pm.response.to.have.header(\"Server\", \"cloudflare\");",
							"    pm.response.to.have.header(\"CF-RAY\");",
							"    pm.response.to.have.header(\"alt-svc\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonblob.com/api/jsonBlob/{{id}}",
					"protocol": "https",
					"host": [
						"jsonblob",
						"com"
					],
					"path": [
						"api",
						"jsonBlob",
						"{{id}}"
					]
				},
				"description": "Explore the world of luxury fashion testing with this Prada API mock created for showcasing testing skills. This project simulates a simplified Prada API using JSON blobs, allowing users to interact with endpoints reminiscent of a real fashion API. Utilize Postman to send requests, test different scenarios, and enhance your API testing capabilities. Dive into the realm of fashion-tech without leaving the comfort of your testing environment."
			},
			"response": []
		},
		{
			"name": "Confirm account was daleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response have correct code",
							"switch (responseCode.code) {",
							"    case 404:",
							"        tests[\"404 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 Unauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"// Test to check if the response time is less than 0.5 sec",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Assuming the response JSON is stored in the variable 'responseJson'",
							"const responseJson = pm.response.json();",
							"",
							"// Test schema",
							"pm.test(\"Response should have a 'message' property\", function () {",
							"    pm.expect(responseJson).to.have.property('message');",
							"});",
							"",
							"pm.test(\"The 'message' property should be a string\", function () {",
							"    pm.expect(responseJson.message).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should have a '_links' property\", function () {",
							"    pm.expect(responseJson).to.have.property('_links');",
							"});",
							"",
							"pm.test(\"The '_links' property should be an object\", function () {",
							"    pm.expect(responseJson._links).to.be.an('object');",
							"});",
							"",
							"pm.test(\"The '_links' property should have a 'self' property\", function () {",
							"    pm.expect(responseJson._links).to.have.property('self');",
							"});",
							"",
							"pm.test(\"The 'self' property should be an object\", function () {",
							"    pm.expect(responseJson._links.self).to.be.an('object');",
							"});",
							"",
							"pm.test(\"The 'self' property should have 'href' and 'templated' properties\", function () {",
							"    pm.expect(responseJson._links.self).to.have.property('href');",
							"    pm.expect(responseJson._links.self).to.have.property('templated');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://jsonblob.com/api/jsonBlob/{{id}}",
					"protocol": "https",
					"host": [
						"jsonblob",
						"com"
					],
					"path": [
						"api",
						"jsonBlob",
						"{{id}}"
					]
				},
				"description": "Explore the world of luxury fashion testing with this Prada API mock created for showcasing testing skills. This project simulates a simplified Prada API using JSON blobs, allowing users to interact with endpoints reminiscent of a real fashion API. Utilize Postman to send requests, test different scenarios, and enhance your API testing capabilities. Dive into the realm of fashion-tech without leaving the comfort of your testing environment."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "ii",
			"value": "http://jsonblob.com/api/jsonBlob/1196282970062577664"
		},
		{
			"key": "link",
			"value": "http://jsonblob.com/api/jsonBlob/1196282970062577664"
		}
	]
}